@model WeaponDoc.Areas.Manager.Models.CallViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Areas/Manager/Views/Shared/_LayoutManager.cshtml";
}

<style>
    * {
        box-sizing: border-box;
    }

    body {
        background-color: #f1f1f1;
    }

    #regForm {
        background-color: #ffffff;
        margin: 100px auto;
        font-family: Raleway;
        padding: 40px;
        width: 70%;
        min-width: 300px;
    }

    h1 {
        text-align: center;
    }

    input {
        padding: 10px;
        width: 100%;
        font-size: 17px;
        font-family: Raleway;
        border: 1px solid #aaaaaa;
    }

        /* Mark input boxes that gets an error on validation: */
        input.invalid {
            background-color: #ffdddd;
        }

    /* Hide all steps by default: */
    .tab {
        display: none;
    }

    button {
        background-color: #4CAF50;
        color: #ffffff;
        border: none;
        padding: 10px 20px;
        font-size: 17px;
        font-family: Raleway;
        cursor: pointer;
    }

        button:hover {
            opacity: 0.8;
        }

    #prevBtn {
        background-color: #bbbbbb;
    }

    /* Make circles that indicate the steps of the form: */
    .step {
        height: 15px;
        width: 15px;
        margin: 0 2px;
        background-color: #bbbbbb;
        border: none;
        border-radius: 50%;
        display: inline-block;
        opacity: 0.5;
    }

        .step.active {
            opacity: 1;
        }

        /* Mark the steps that are finished and valid: */
        .step.finish {
            background-color: #4CAF50;
        }
</style>

<script type="text/javascript">
    $(document).ready(function () {

        $(".addRow").click(function () {

            var itemCount = $('#itemsform').length;
            //if (owCount == 1) {
            //    $("#regForm").append('<span>Phone Type Phone Number</span>');
            //}
            alert($("#itemsform").length);
            $("#itemsbox").append(' <div id="itemsform"><div class="form-group"> <label> Программа испытаний </label> <select required name=ItemsList[' + itemCount + '].ProgramNameShort>@foreach (SelectListItem item in ViewBag.VBprograms) { <option value="@item.Value">@item.Text</option>} </select>   <br> </div> <div class="form-group"> <label>Название объекта</label> ////////////// @Html.EditorFor(model => Model.ItemsList[itemCount].ItemName, new { htmlAttributes = new { @class = "form-control" } }) @Html.ValidationMessageFor(model => Model.ItemsList[itemCount].ItemName, "", new { @class = "text-danger" }) <br> </div> <div class="form-group"> @Html.LabelFor(model => Model.ItemsList[itemCount].ItemProducer, htmlAttributes: new { @class = "control-label col-md-2" }) @Html.EditorFor(model => Model.ItemsList[itemCount].ItemProducer, new { htmlAttributes = new { @class = "form-control" } }) @Html.ValidationMessageFor(model => Model.ItemsList[itemCount].ItemProducer, "", new { @class = "text-danger" }) <br> </div> <div class="form-group"> @Html.LabelFor(model => Model.ItemsList[itemCount].ItemQty, htmlAttributes: new { @class = "control-label col-md-2" }) @Html.EditorFor(model => Model.ItemsList[itemCount].ItemQty, new { htmlAttributes = new { @class = "form-control" } }) @Html.ValidationMessageFor(model => Model.ItemsList[itemCount].ItemQty, "", new { @class = "text-danger" }) <br> </div> <div class="form-group"> @Html.LabelFor(model => Model.ItemsList[itemCount].Image, htmlAttributes: new { @class = "control-label col-md-2" }) @Html.ActionLink("Create New", "Create") @Html.EditorFor(model => Model.ItemsList[itemCount].Image, new { htmlAttributes = new { @class = "form-control" } }) @Html.ValidationMessageFor(model => Model.ItemsList[itemCount].Image, "", new { @class = "text-danger" }) </div> <div class="form-group"> @Html.LabelFor(model => Model.ItemsList[itemCount].Additional, htmlAttributes: new { @class = "control-label col-md-2" }) @Html.EditorFor(model => Model.ItemsList[itemCount].Additional, new { htmlAttributes = new { @class = "form-control" } }) @Html.ValidationMessageFor(model => Model.ItemsList[itemCount].Additional, "", new { @class = "text-danger" }) </div> <div class="form-group"> @Html.LabelFor(model => Model.ItemsList[itemCount].Comments, htmlAttributes: new { @class = "control-label col-md-2" }) @Html.EditorFor(model => Model.ItemsList[itemCount].Comments, new { htmlAttributes = new { @class = "form-control" } }) @Html.ValidationMessageFor(model => Model.ItemsList[itemCount].Comments, "", new { @class = "text-danger" }) </div></div>');
        });

        $("#itemsform").on('click', '.remRow', function () {

            $(this).closest('.phoneRow').remove();

            $('.phoneType').each(function (index) {
                $(this).attr('name', 'Phones[' + index + '].Type');
            });

            $('.phoneNumber').each(function (index) {
                $(this).attr('name', 'Phones[' + index + '].Number');
            });
        })
    });
</script>


<div class="content-wrapper">


    <section class="content-header">

        <h1>
           Создать заявку
            <small></small>
        </h1>
    </section>

    <section class="content">

        @using (Html.BeginForm(null, null, FormMethod.Post, new { @id = "regForm" }))
        {
            @Html.AntiForgeryToken()
            
        <div class="tab">
            <div class="box">
                <div class="box-header with-border">
                    <h4>Введите данные о заявке</h4>
                    
                </div>
                <div class="box-body">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.CallDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.TextBoxFor(model => model.CallDate, null, new { @oninput = "this.className = ''", @placeholder = "Дата...", @id = "Datepicker", @title = "Дата заявки, заявления" })
                        @Html.ValidationMessageFor(model => model.CallDate, "", new { @class = "text-danger" })
                        
                    </div>
                    <br>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Number, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.TextBoxFor(model => model.Number)
                        @Html.ValidationMessageFor(model => model.Number, "", new { @class = "text-danger" })
                    </div>
                    <br>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ContractDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.TextBoxFor(model => model.ContractDate, DateTime.Today.ToString("dd MMMM yyyy г."), new { @oninput = "this.className = ''", @placeholder = "Дата...", @id = "Datepicker2" })
                        @Html.ValidationMessageFor(model => model.ContractDate, "", new { @class = "text-danger" })
                       
                    </div>
                    <br>

                    <div class="form-group">
                        @Html.LabelFor(model => model.DocType, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.TextBoxFor(model => model.DocType, null, new { @placeholder = "Введите тип документа", @title = "Договор, доп.соглашение и т.д."})
                        @Html.ValidationMessageFor(model => model.DocType, "", new { @class = "text-danger" })
                        
                    </div>
                </div>
                </div>
            </div>


        <div class="tab">
            <div class="box">
                <div class="box-header with-border">
                    <h4>Введите данные о представителе заявителя</h4>
                </div>
                <div class="box-body">
                    <div class="form-group">
                        @Html.LabelFor(model => model.RepFamilyName, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.RepFamilyName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RepFamilyName, "Введите фамилию представителя заказчика!", new { @class = "text-danger" })

                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.RepFirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.RepFirstName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RepFirstName, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.RepMidName, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.RepMidName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RepMidName, "", new { @class = "text-danger" })
                        
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.RepPosition, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.RepPosition, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RepPosition, "", new { @class = "text-danger" })
                        
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.RepPhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.RepPhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RepPhoneNumber, "", new { @class = "text-danger" })
                        
                    </div>
                </div>
                </div>
            </div>
            
        <div class="tab">
            <div class="box">
                <div class="box-header with-border">
                    <h4>Введите данные о заявителе</h4>
                </div>
                <div class="box-body">

                <div class="form-group">
                    @Html.LabelFor(model => model.JudicialStatus, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.DropDownListFor(model => model.JudicialStatus, ViewBag.VBjstatuses as SelectList, "Выберите юридический статус заказчика");
                    @Html.ValidationMessageFor(model => model.JudicialStatus, "", new { @class = "text-danger" })
                    
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
                    
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CustomerAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.CustomerAddress, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CustomerAddress, "", new { @class = "text-danger" })
                    
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TaxID, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.TextBoxFor(model => model.TaxID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.TaxID, "", new { @class = "text-danger" })
                    
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BIC, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.BIC, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BIC, "", new { @class = "text-danger" })
                    
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CustomerPhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.CustomerPhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CustomerPhoneNumber, "", new { @class = "text-danger" })
                    
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.OKPO, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.TextBoxFor(model => model.OKPO, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OKPO, "", new { @class = "text-danger" })
                    
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CustomerBankAccount, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.CustomerBankAccount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CustomerBankAccount, "", new { @class = "text-danger" })
                    
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BankBranch, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.BankBranch, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BankBranch, "", new { @class = "text-danger" })
                    
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BranchAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.BranchAddress, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BranchAddress, "", new { @class = "text-danger" })
                    
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BankCode, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.TextBoxFor(model => model.BankCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BankCode, "", new { @class = "text-danger" })
                    
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.MPhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.MPhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MPhoneNumber, "", new { @class = "text-danger" })
                    
                </div>
            </div>

                </div>
            </div>
            <div class="tab">
                <h4>Введите данные о представителе ГКСЭ</h4>
                <div class="form-group">
                    @Html.LabelFor(model => model.Exp, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("ddlExperts", ViewBag.VBexperts as SelectList, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Exp, "", new { @class = "text-danger" })
                    </div>
                </div>

                @*<div class="form-group">
                @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MidName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.MidName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MidName, "", new { @class = "text-danger" })
                </div>
            </div>*@

                @*<div class="form-group">
                @Html.LabelFor(model => model.PositionDescr, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PositionDescr, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PositionDescr, "", new { @class = "text-danger" })
                </div>
            </div>*@

                <div class="form-group">
                    @Html.LabelFor(model => model.AffidavitNum, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.AffidavitNum, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.AffidavitNum, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AffidavitDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.AffidavitDate, new { htmlAttributes = new { @class = "form-control", @id="Datepicker3" } })
                        @Html.ValidationMessageFor(model => model.AffidavitDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="tab">
                <div class="box">
                    <div class="box-header with-border">
                        <h4>Введите данные об объекте испытаний</h4>
                    </div>
                    <div class="box-body" id="#itemsbox">
                        <div id="itemsform">

                        <div class="form-group">
                            @Html.Label("Программа испытаний")
                           @*htmlAttributes: new { @class = "control-label col-md-2" })*@

                            @Html.DropDownList("ItemsList[0].ProgramNameShort", ViewBag.VBprograms as SelectList, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => Model.ItemsList[0].ProgramNameShort, "", new { @class = "text-danger" })
                            <br>

                        </div>
                        
                        <div class="form-group">
                            @*@Html.LabelFor(model => Model.ItemName, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.Editor("", new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => Model.ItemName, "", new { @class = "text-danger" })*@


                            @Html.Label("Название объекта", htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.EditorFor(model => Model.ItemsList[0].ItemName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => Model.ItemsList[0].ItemName, "", new { @class = "text-danger" })
                            <br>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => Model.ItemsList[0].ItemProducer, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.EditorFor(model => Model.ItemsList[0].ItemProducer, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => Model.ItemsList[0].ItemProducer, "", new { @class = "text-danger" })
                            <br>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => Model.ItemsList[0].ItemQty, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.EditorFor(model => Model.ItemsList[0].ItemQty, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => Model.ItemsList[0].ItemQty, "", new { @class = "text-danger" })
                            <br>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => Model.ItemsList[0].Image, htmlAttributes: new { @class = "control-label col-md-2" })

                            @Html.ActionLink("Create New", "Create")

                            @Html.EditorFor(model => Model.ItemsList[0].Image, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => Model.ItemsList[0].Image, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => Model.ItemsList[0].Additional, htmlAttributes: new { @class = "control-label col-md-2" })
                            
                                @Html.EditorFor(model => Model.ItemsList[0].Additional, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => Model.ItemsList[0].Additional, "", new { @class = "text-danger" })
                            
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => Model.ItemsList[0].Comments, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.EditorFor(model => Model.ItemsList[0].Comments, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => Model.ItemsList[0].Comments, "", new { @class = "text-danger" })

                        </div>


                    </div>

                    <div class="box-footer">
                        <p>
                            <a href="javascript:void(0);" class="addRow">Добавить объект</a>
                        </p>
                    </div>

                         
                        </div>
                    </div>
                </div>

                    @*<div class="form-group">
            @Html.LabelFor(model => model.ProgramNameShort, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProgramNameShort, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProgramNameShort, "", new { @class = "text-danger" })
            </div>
        </div>*@

                    @*<div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>*@



                    }
                    <div style="overflow:auto;">
                        <div style="float:right;">
                            <button type="button" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                            <button type="button" id="nextBtn" onclick="nextPrev(1)">Next</button>
                        </div>
                    </div>
                    <!-- Circles which indicates the steps of the form: -->
                    <div style="text-align:center;margin-top:40px;">
                        <span class="step"></span>
                        <span class="step"></span>
                        <span class="step"></span>
                        <span class="step"></span>
                    </div>

                    <div>
                        @Html.ActionLink("Back to List", "Index")
                    </div>
</section>
    

        @section Scripts {
            @Scripts.Render("~/bundles/jqueryval")

            <script src="~/Scripts/RegexFilter.js"></script>

            <script>
                var currentTab = 0; // Current tab is set to be the first tab (0)
                showTab(currentTab); // Display the crurrent tab

                function showTab(n) {
                    // This function will display the specified tab of the form...
                    var x = document.getElementsByClassName("tab");
                    x[n].style.display = "block";
                    //... and fix the Previous/Next buttons:
                    if (n == 0) {
                        document.getElementById("prevBtn").style.display = "none";
                    } else {
                        document.getElementById("prevBtn").style.display = "inline";
                    }
                    if (n == (x.length - 1)) {
                        document.getElementById("nextBtn").innerHTML = "Submit";
                    } else {
                        document.getElementById("nextBtn").innerHTML = "Next";
                    }
                    //... and run a function that will display the correct step indicator:
                    fixStepIndicator(n)
                }

                function nextPrev(n) {
                    // This function will figure out which tab to display
                    var x = document.getElementsByClassName("tab");
                    // Exit the function if any field in the current tab is invalid:
                    if (n == 1 && !validateForm()) return false;
                    // Hide the current tab:
                    x[currentTab].style.display = "none";
                    // Increase or decrease the current tab by 1:
                    currentTab = currentTab + n;
                    // if you have reached the end of the form...
                    if (currentTab >= x.length) {
                        // ... the form gets submitted:
                        document.getElementById("regForm").submit();
                        return false;
                    }
                    // Otherwise, display the correct tab:
                    showTab(currentTab);
                }

                function validateForm() {
                    // This function deals with validation of the form fields
                    var x, y, i, valid = true;
                    x = document.getElementsByClassName("tab");
                    y = x[currentTab].getElementsByTagName("input");
                    // A loop that checks every input field in the current tab:
                    for (i = 0; i < y.length; i++) {
                        // If a field is empty...
                        if (y[i].value == "") {
                            // add an "invalid" class to the field:
                            y[i].className += " invalid";
                            // and set the current valid status to false
                            valid = false;
                        }
                    }
                    // If the valid status is true, mark the step as finished and valid:
                    if (valid) {
                        document.getElementsByClassName("step")[currentTab].className += " finish";
                    }
                    return valid; // return the valid status
                }

                function fixStepIndicator(n) {
                    // This function removes the "active" class of all steps...
                    var i, x = document.getElementsByClassName("step");
                    for (i = 0; i < x.length; i++) {
                        x[i].className = x[i].className.replace(" active", "");
                    }
                    //... and adds the "active" class on the current step:
                    x[n].className += " active";
                }
            </script>
            <script src="~/Scripts/AdvancedForms.js"></script>

        }
</div>