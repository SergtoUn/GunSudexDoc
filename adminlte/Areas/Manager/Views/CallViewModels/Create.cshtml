@model WeaponDoc.Areas.Manager.Models.CallViewModel

@{
    ViewBag.Title = "Создать заявку";
    //Layout = "~/Areas/Manager/Views/Shared/_LayoutManager.cshtml";
}




<style>
    * {
        box-sizing: border-box;
    }

    body {
        background-color: #f1f1f1;
    }

    #regForm {
        background-color: #ffffff;
        margin: 50px auto;
        font-family: Raleway;
        padding: 20px;
        width: 70%;
        min-width: 300px;
    }

    h1 {
        text-align: center;
    }

    input {
        padding: 10px;
        width: 100%;
        font-size: 17px;
        font-family: Raleway;
        border: 1px solid #aaaaaa;
    }

        /* Mark input boxes that gets an error on validation: */
        input.invalid {
            background-color: #ffdddd;
        }

    /* Hide all steps by default: */
    .tab {
        display: none;
    }

    button {
        background-color: #4CAF50;
        color: #ffffff;
        border: none;
        padding: 10px 20px;
        font-size: 17px;
        font-family: Raleway;
        cursor: pointer;
    }

        button:hover {
            opacity: 0.8;
        }

    #prevBtn {
        background-color: #bbbbbb;
    }

    /* Make circles that indicate the steps of the form: */
    .step {
        height: 15px;
        width: 15px;
        margin: 0 2px;
        background-color: #bbbbbb;
        border: none;
        border-radius: 50%;
        display: inline-block;
        opacity: 0.5;
    }

        .step.active {
            opacity: 1;
        }

        /* Mark the steps that are finished and valid: */
        .step.finish {
            background-color: #4CAF50;
        }
</style>


@Html.Raw(TempData["msg"])

<div class="content-wrapper">


    <section class="content-header">

        <h1>
            Создать заявку
            <small></small>
        </h1>
    </section>

    @*<section class="content">*@

    @using (Html.BeginForm(null, null, FormMethod.Post, new { @id = "regForm" }))
    {
        @Html.AntiForgeryToken()



        <div class="tab">
            <div class="form-horizontal">

                <h4>Введите данные о представителе ГКСЭ</h4>





                <div class="form-group">
                    @Html.LabelFor(model => model.ExpID, htmlAttributes: new { @class = "control-label col-md-4" })
                    @*@Html.DropDownList("ExpertID", null, new { htmlAttributes = new { @class = "form-control col-md-8" } })*@

                    @Html.DropDownList("ExpID", ViewBag.VBexpID as SelectList, new { htmlAttributes = new { @class = "form-control col-md-8" } })
                    @Html.ValidationMessageFor(model => model.ExpID, "", new { @class = "text-danger" })
                </div>
                <br>

                <div class="form-group">
                    @Html.LabelFor(model => model.AffidavitNum, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.AffidavitNum, new { htmlAttributes = new { @class = "col-md-8" } })
                    @Html.ValidationMessageFor(model => model.AffidavitNum, "", new { @class = "text-danger" })
                </div>
                <br>

                <div class="form-group">
                    @Html.LabelFor(model => model.AffidavitDate, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.AffidavitDate, DateTime.Today.ToString("{0:dd MMMM yyyy} г."), new { htmlAttributes = new { @class = "col-md-8", @id = "Datepicker3" } })
                    @*<div class="input-group date" data-provide="datepicker" data-date-format="dd mm yyyy" >
                            <input type="text" class="form-control">
                            <div class="input-group-addon">
                                <span class="glyphicon glyphicon-th"></span>
                            </div>
                        </div>*@
                    @Html.ValidationMessageFor(model => model.AffidavitDate, "", new { @class = "text-danger" })
                </div>
                <br>


            </div>
        </div>
        <div class="tab">
            <div class="form-horizontal">

                <h4>Введите данные о заявке</h4>



                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group">
                    @Html.LabelFor(model => model.CallName, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.TextBoxFor(model => model.CallName, null, new { @class = "col-md-8", @placeholder = "Основание испытаний", @title = "Название" })
                    @Html.ValidationMessageFor(model => model.CallName, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CallDate, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.TextBoxFor(model => model.CallDate, DateTime.Today.ToString("{0:dd MMMM yyyy г.}"), new { @class = "col-md-8 datepicker", @oninput = "this.className = ''", @placeholder = "Дата...", @id = "Datepicker", @title = "Дата заявки, заявления" })
                    @Html.ValidationMessageFor(model => model.CallDate, "", new { @class = "text-danger" })

                </div>
                <br>

                <div class="form-group">
                    @Html.LabelFor(model => model.SampleActDate, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.TextBoxFor(model => model.SampleActDate, DateTime.Today.ToString("{0:dd MMMM yyyy г.}"), new { @class = "col-md-8 datepicker", @oninput = "this.className = ''", @placeholder = "Дата...", @id = "Datepicker", @title = "Дата заявки, заявления" })
                    @Html.ValidationMessageFor(model => model.SampleActDate, "", new { @class = "text-danger" })

                </div>
                <br>

                <div class="form-group">
                    @Html.LabelFor(model => model.Number, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.TextBoxFor(model => model.Number, new { @class = "col-md-8" })
                    @Html.ValidationMessageFor(model => model.Number, "", new { @class = "text-danger" })
                </div>
                <br>

                @*<div class="form-group">
                        @Html.LabelFor(model => model.ContractDate, htmlAttributes: new { @class = "control-label col-md-4" })
                        @Html.TextBoxFor(model => model.ContractDate, DateTime.Today.ToString("dd MMMM yyyy г."), new { @class = "col-md-8", @oninput = "this.className = ''", @placeholder = "Дата...", @id = "Datepicker2" })
                        @Html.ValidationMessageFor(model => model.ContractDate, "", new { @class = "text-danger" })

                    </div>*@
                <br>

                <div class="form-group">
                    @Html.LabelFor(model => model.DocType, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.TextBoxFor(model => model.DocType, null, new { @class = "col-md-8", @placeholder = "Введите тип документа", @title = "Договор, доп.соглашение и т.д." })
                    @Html.ValidationMessageFor(model => model.DocType, "", new { @class = "text-danger" })

                </div>

                <br>

                <div class="form-group">
                    @Html.LabelFor(model => model.SampleActDate, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.TextBoxFor(model => model.SampleActDate, DateTime.Today.ToString("{0:dd MMMM yyyy г.}"), new { @class = "col-md-8 datepicker", @oninput = "this.className = ''", @placeholder = "Дата...", @id = "Datepicker", @title = "Дата заявки, заявления" })
                    @Html.ValidationMessageFor(model => model.SampleActDate, "", new { @class = "text-danger" })

                </div>
                <br>


                <div class="form-group">
                    @Html.LabelFor(model => model.CostEfficiency, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.TextBoxFor(model => model.CostEfficiency, null, new { @class = "col-md-8", @placeholder = "Введите % рентабельности", @title = "Рентабельность" })
                    @Html.ValidationMessageFor(model => model.CostEfficiency, "", new { @class = "text-danger" })

                </div>



            </div>
        </div>


        <div class="tab">
            <div class="form-horizontal">

                <h4>Введите данные о представителе заявителя</h4>


                <div class="form-group">
                    @Html.LabelFor(model => model.RepFamilyName, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.RepFamilyName, new { htmlAttributes = new { @class = "col-md-8" } })
                    @Html.ValidationMessageFor(model => model.RepFamilyName, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RepFirstName, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.RepFirstName, new { htmlAttributes = new { @class = "col-md-8" } })
                    @Html.ValidationMessageFor(model => model.RepFirstName, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RepMidName, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.RepMidName, new { htmlAttributes = new { @class = "col-md-8" } })
                    @Html.ValidationMessageFor(model => model.RepMidName, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RepPosition, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.RepPosition, new { htmlAttributes = new { @class = "col-md-8" } })
                    @Html.ValidationMessageFor(model => model.RepPosition, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RepPhoneNumber, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.RepPhoneNumber, new { htmlAttributes = new { @class = "col-md-8" } })
                    @Html.ValidationMessageFor(model => model.RepPhoneNumber, "", new { @class = "text-danger" })

                </div>

            </div>
        </div>

        <div class="tab">
            <div class="form-horizontal" style="width:auto">

                <h4>Введите данные о заявителе</h4>



                <div class="form-group">
                    @Html.LabelFor(model => model.JudicialStatus, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.DropDownList("JudicialStatus", ViewBag.VBjstatuses as SelectList, "Выберите юридический статус заказчика", new { @class = "col-md-8" })
                    @Html.ValidationMessageFor(model => model.JudicialStatus, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "col-md-8" } })
                    @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CustomerAddress, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.CustomerAddress, new { htmlAttributes = new { @class = "col-md-8" } })
                    @Html.ValidationMessageFor(model => model.CustomerAddress, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TaxID, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.TextBoxFor(model => model.TaxID, new { htmlAttributes = new { @class = "col-md-8", @type = "number", @min = "1", @maxlength = "9" } })
                    @Html.ValidationMessageFor(model => model.TaxID, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BIC, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.BIC, new { htmlAttributes = new { @class = "col-md-8" } })
                    @Html.ValidationMessageFor(model => model.BIC, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CustomerPhoneNumber, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.CustomerPhoneNumber, new { htmlAttributes = new { @class = "col-md-8" } })
                    @Html.ValidationMessageFor(model => model.CustomerPhoneNumber, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.OKPO, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.TextBoxFor(model => model.OKPO, new { htmlAttributes = new { @class = "col-md-8" } })
                    @Html.ValidationMessageFor(model => model.OKPO, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CustomerBankAccount, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.CustomerBankAccount, new { htmlAttributes = new { @class = "col-md-8", maxlength = "28" } })
                    @Html.ValidationMessageFor(model => model.CustomerBankAccount, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BankBranch, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.BankBranch, new { htmlAttributes = new { @class = "col-md-8" } })
                    @Html.ValidationMessageFor(model => model.BankBranch, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BranchAddress, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.BranchAddress, new { htmlAttributes = new { @class = "col-md-8" } })
                    @Html.ValidationMessageFor(model => model.BranchAddress, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BankCode, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.BankCode, new { htmlAttributes = new { @class = "col-md-8" } })
                    @Html.ValidationMessageFor(model => model.BankCode, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.MPhoneNumber, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.MPhoneNumber, new { htmlAttributes = new { @class = "col-md-8" } })
                    @Html.ValidationMessageFor(model => model.MPhoneNumber, "", new { @class = "text-danger" })

                </div>


            </div>
        </div>



        <div class="tab">
            <div class="form-horizontal">

                <h4>Введите данные об объекте испытаний</h4>

                <table id="itemstable" class="display">
                    <thead>

                        <tr>
                            <th>
                                Программа
                                @*@Html.DisplayNameFor(model => Model.ItemsList[0].ProgramNameShort)*@
                            </th>
                            <th>
                                К чему относится объект
                                @*@Html.DisplayNameFor(model => Model.ItemsList[0].ProgramNameShort)*@
                            </th>
                            <th>
                                Объект
                                @*@Html.DisplayNameFor(model => Model.ItemsList[0].ItemName)*@
                            </th>
                            <th>
                                Производитель
                                @*@Html.DisplayNameFor(model => Model.ItemsList[0].ItemProducer)*@
                            </th>
                            <th>
                                К-во
                                @*@Html.DisplayNameFor(model => Model.ItemsList[0].ItemQty)*@
                            </th>
                            <th>
                                Дополнительно
                                @*@Html.DisplayNameFor(model => Model.ItemsList[0].Additional)*@
                            </th>
                            <th>
                                Дата калькуляции
                                @*@Html.DisplayNameFor(model => Model.ItemsList[0].Comments)*@
                            </th>
                            <th>
                                Номер калькуляции
                                @*@Html.DisplayNameFor(model => Model.ItemsList[0].Comments)*@
                            </th>

                        </tr>
                    </thead>

                    <tr class="itemRow">
                        <td>
                            @Html.DropDownList("ItemsList[0].ProgramNameShort", ViewBag.VBprograms as SelectList, new { htmlAttributes = new { @class = "col" } })
                            @Html.ValidationMessageFor(model => Model.ItemsList[0].ProgramNameShort, "", new { @class = "text-danger" })
                        </td>

                        <td>
                            @Html.DropDownList("ItemsList[0].ItemSubtype", ViewBag.Stypes as SelectList, new { htmlAttributes = new { @class = "col" } })
                            @Html.ValidationMessageFor(model => Model.ItemsList[0].ItemSubtype, "", new { @class = "text-danger" })
                        </td>

                        <td>
                            @Html.Editor("ItemsList[0].ItemName", new { htmlAttributes = new { @class = "col" } })
                            @Html.ValidationMessageFor(model => Model.ItemsList[0].ItemName, "", new { @class = "text-danger" })
                        </td>

                        <td>
                            @Html.Editor("ItemsList[0].ItemProducer", new { htmlAttributes = new { @class = "col" } })
                            @Html.ValidationMessageFor(model => Model.ItemsList[0].ItemProducer, "", new { @class = "text-danger" })
                        </td>

                        <td>
                            @Html.Editor("ItemsList[0].ItemQty", new { htmlAttributes = new { @class = "col" } })
                            @Html.ValidationMessageFor(model => Model.ItemsList[0].ItemQty, "", new { @class = "text-danger" })
                        </td>

                        <td>
                            @Html.Editor("ItemsList[0].Additional", new { htmlAttributes = new { @class = "col" } })
                            @Html.ValidationMessageFor(model => Model.ItemsList[0].Additional, "", new { @class = "text-danger" })
                        </td>

                        <td>
                            @Html.Editor("ItemsList[0].calcDate", new { htmlAttributes = new { @class = "col datepicker", @id = "Datepicker4" } })
                            @Html.ValidationMessageFor(model => Model.ItemsList[0].calcDate, "", new { @class = "text-danger" })
                        </td>

                        <td>
                            @Html.Editor("ItemsList[0].calcNum", new { htmlAttributes = new { @class = "col" } })
                            @Html.ValidationMessageFor(model => Model.ItemsList[0].calcNum, "", new { @class = "text-danger" })
                        </td>
                        @*<td>
                                <input name="ItemsList[0].Image" id="ItemsList[0].Image" type="file" value="Загрузить изображение" btn btn-block btn-primary btn-lg />
                            </td>*@
                    </tr>





                </table>
                <div class="box-footer">
                    <p>

                        <input type="button" id="addRow" value="Добавить объект" class="btn btn-block btn-success btn-lg" />
                        <input type="button" id="remRow" value="Удалить объект" class="btn btn-block btn-danger btn-lg">

                    </p>
                </div>
            </div>
        </div>



    }
    <div style="overflow:auto;">
        <div style="float:right;">
            <button type="button" id="prevBtn" onclick="nextPrev(-1)">Назад</button>
            <button type="button" id="nextBtn" onclick="nextPrev(1)">Далее</button>
        </div>
    </div>
    <!-- Circles which indicates the steps of the form: -->
    <div style="text-align:center;margin-top:40px;">
        <span class="step"></span>
        <span class="step"></span>
        <span class="step"></span>
        <span class="step"></span>
        <span class="step"></span>
    </div>

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

    @if (ViewBag.Message != null)
    {
        <script>

                $(document).ready(function ()
                {

                    alert('@ViewBag.Message');

                });

        </script>

    }

    @*</section>*@


    @section Scripts {

        @Scripts.Render("~/bundles/jqueryval")



        <link href="~/Content/DataTables/datatables.min.css" rel="stylesheet" />
        <script src="~/Content/DataTables/datatables.min.js"></script>
        <script src="~/Content/DataTables/datatables.js"></script>
        <script src="~/Content/DataTables/Buttons-1.5.2/js/dataTables.buttons.min.js"></script>
        <script src="~/Content/DataTables/Buttons-1.5.2/js/buttons.flash.min.js"></script>
        <script src="~/Content/DataTables/JSZip-2.5.0/jszip.min.js"></script>
        <script src="~/Content/DataTables/pdfmake-0.1.36/pdfmake.min.js"></script>
        <script src="~/Content/DataTables/Buttons-1.5.2/js/buttons.html5.min.js"></script>
        <script src="~/Content/DataTables/Buttons-1.5.2/js/buttons.print.min.js"></script>
        <script src="~/Scripts/RegexFilter.js"></script>
        <script src="~/Scripts/AdvancedForms.js"></script>

        <script>
            $(document).ready(function () {

                //var t = $("#itemstable").DataTable(
                //    {
                //        paging: false,
                //        bFilter: false,
                //        ordering: false,
                //        searching: true,
                //        dom: 't',

                //        "language":
                //            {
                //                "processing": "Подождите...",
                //                "search": "Поиск:",
                //                "lengthMenu": "Показать _MENU_ записей",
                //                "info": "Записи с _START_ до _END_ из _TOTAL_ записей",
                //                "infoEmpty": "Записи с 0 до 0 из 0 записей",
                //                "infoFiltered": "(отфильтровано из _MAX_ записей)",
                //                "infoPostFix": "",
                //                "loadingRecords": "Загрузка записей...",
                //                "zeroRecords": "Записи отсутствуют.",
                //                "emptyTable": "В таблице отсутствуют данные",
                //                "paginate": {
                //                    "first": "Первая",
                //                    "previous": "Предыдущая",
                //                    "next": "Следующая",
                //                    "last": "Последняя"
                //                },
                //                "aria": {
                //                    "sortAscending": ": активировать для сортировки столбца по возрастанию",
                //                    "sortDescending": ": активировать для сортировки столбца по убыванию"
                //                }
                //            }

                //    });





            })

            $('#addRow').on('click', function () {

                var counter = $('.itemRow').length;
                $('#itemstable').append('<tr class="itemRow"> <td><select required name="ItemsList[' + counter + '].ProgramNameShort">@foreach (SelectListItem item in ViewBag.VBprograms) { <option value="@item.Value">@item.Text</option>} </select></td>' +
                        '<td><select required type="text" name="ItemsList[' + counter + '].ItemSubtype" /></td>' +
                        '<td><input type="text" name="ItemsList[' + counter + '].ItemName" /></td>' +
                        '<td><input type="text" name="ItemsList[' + counter + '].ItemProducer" /></td>' +
                        '<td><input type="text" name="ItemsList[' + counter + '].ItemQty" /></td>' +
                        '<td><input type="text" name="ItemsList[' + counter + '].Additional" /></td>' +
                        '<td><input type="text" name="ItemsList[' + counter + '].Comments" /></td>' +
                        '<td><input type="text" name="ItemsList[' + counter + '].calcDate" id = "Datepicker' + counter + '" /></td>' +
                        '<td><input type="text" name="ItemsList[' + counter + '].calcNum" /></td>' +
                        '<td><input type="file" name="ItemsList[' + counter + '].Image" /></td>' +
                        '</tr>');

                        counter++;
                });

                $('#remRow').on('click', function () {
                    $('.itemRow').last().remove();

                        counter--;
                });


        </script>

        <script>
            var currentTab = 0; // Current tab is set to be the first tab (0)
            showTab(currentTab); // Display the crurrent tab

            function showTab(n) {
                // This function will display the specified tab of the form...
                var x = document.getElementsByClassName("tab");
                x[n].style.display = "block";
                //... and fix the Previous/Next buttons:
                if (n == 0) {
                    document.getElementById("prevBtn").style.display = "none";
                } else {
                    document.getElementById("prevBtn").style.display = "inline";
                }
                if (n == (x.length - 1)) {
                    document.getElementById("nextBtn").innerHTML = "Сохранить значения";
                } else {
                    document.getElementById("nextBtn").innerHTML = "Далее";
                }
                //... and run a function that will display the correct step indicator:
                fixStepIndicator(n)
            }

            function nextPrev(n) {
                // This function will figure out which tab to display
                var x = document.getElementsByClassName("tab");
                // Exit the function if any field in the current tab is invalid:
                if (n == 1 && !validateForm()) return false;
                // Hide the current tab:
                x[currentTab].style.display = "none";
                // Increase or decrease the current tab by 1:
                currentTab = currentTab + n;
                // if you have reached the end of the form...
                if (currentTab >= x.length) {
                    // ... the form gets submitted:
                    document.getElementById("regForm").submit();
                    return false;
                }
                // Otherwise, display the correct tab:
                showTab(currentTab);
            }

            function validateForm() {
                // This function deals with validation of the form fields
                var x, y, i, valid = true;
                x = document.getElementsByClassName("tab");
                y = x[currentTab].getElementsByTagName("input");
                // A loop that checks every input field in the current tab:
                for (i = 0; i < y.length; i++) {
                    // If a field is empty...
                    if (y[i].value == "") {
                        // add an "invalid" class to the field:
                        y[i].className += " invalid";
                        // and set the current valid status to false
                        valid = false;
                    }
                }
                // If the valid status is true, mark the step as finished and valid:
                if (valid) {
                    document.getElementsByClassName("step")[currentTab].className += " finish";
                }
                return valid; // return the valid status
            }

            function fixStepIndicator(n) {
                // This function removes the "active" class of all steps...
                var i, x = document.getElementsByClassName("step");
                for (i = 0; i < x.length; i++) {
                    x[i].className = x[i].className.replace(" active", "");
                }
                //... and adds the "active" class on the current step:
                x[n].className += " active";
            }

            $("#regForm").validate();

        </script>


    }
</div>
